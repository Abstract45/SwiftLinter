#
# This is a configuration file for Swiftlint. 
# See documentation here: https://github.com/realm/SwiftLint#configuration & https://realm.github.io/SwiftLint/rule-directory.html
#

disabled_rules: # rule identifiers turned on by default to exclude from running
    
opt_in_rules: # rule identifiers turned off by default to include when linting
    - anyobject_protocol
    - array_init
    - capture_variable
    - closure_body_length
    - closure_end_indentation
    - closure_spacing
    - collection_alignment
    - contains_over_filter_count
    - contains_over_filter_is_empty
    - contains_over_first_not_nil
    - contains_over_range_nil_comparison
    - convenience_type
    - discarded_notification_center_observer
    - discouraged_assert
    - discouraged_object_literal
    - discouraged_optional_boolean # This will cause issues for DTOs and will need to be disabled on a case by case basis
    - discouraged_optional_collection # This will cause issues for DTOs and will need to be disabled on a case by case basis
    - empty_collection_literal
    - empty_count
    - empty_string
    - empty_xctest_method
    - enum_case_associated_values_count
    - expiring_todo
    - explicit_init
    - extension_access_modifier
    - fallthrough
    - file_name_no_space
    - first_where
    - flatmap_over_map_reduce
    - force_unwrapping
    - identical_operands
    - implicit_return
    - joined_default_parameter
    - last_where
    - legacy_multiple
    - legacy_objc_type
    - legacy_random
    - literal_expression_end_indentation
    - lower_acl_than_parent
    - missing_docs
    - modifier_order
    - multiline_arguments
    - multiline_function_chains
    - multiline_literal_brackets
    - multiline_parameters
    - nslocalizedstring_key
    - operator_usage_whitespace
    - optional_enum_case_matching
    - overridden_super_call
    - override_in_extension
    - prefer_self_type_over_type_of_self
    - prefer_zero_over_explicit_init
    - prohibited_interface_builder
    - prohibited_super_call
    - raw_value_for_camel_cased_codable_enum
    - reduce_into
    - redundant_nil_coalescing
    - redundant_type_annotation
    - required_enum_case
    - single_test_class
    - sorted_first_last
    - static_operator
    - strict_fileprivate
    - test_case_accessibility
    - toggle_bool
    - unavailable_function
    - unneeded_parentheses_in_closure_argument
    - unowned_variable_capture
    - untyped_error_in_catch
    - unused_declaration
    - unused_import
    - vertical_parameter_alignment_on_call
    - xct_specific_matcher
    - yoda_condition
    
excluded: # paths to ignore during linting. Takes precedence over `opt_in_rules`.
    - Tests
    
line_length: # A rule for the max number of characters on a line.
    warning: 180
    error: 200
    ignores_urls: true

type_body_length: # A rule for the max number of lines in a class body.
    warning: 500
    error: 600

file_length: # A rule for the max number of lines in a file.
    warning: 800
    error: 1200

type_name: # A rule for the max / min number of characters in a type name.
    max_length:
        warning: 60
        error: 80
    excluded:
        - ui

function_parameter_count: # A rule for the max number of parameters in a function.
    warning: 6
    error: 12

identifier_name:
    excluded: # We don't want warnings/errors for identifiers with the following names.
        - id
        - URL
        - x
        - y
        - i
        - qa
        - to

trailing_comma:
      mandatory_comma: true

custom_rules:
    no_ui_colors:
        excluded: '.*Colors(Tests)*.swift' # Ignore this rule in the Colors.swift and ColorsTests.swift files
        name: "Don't Use UIColors"
        regex: '(UIColor[(][^\s]+)|((?<!Colors)(?<!UIBarStyle))[.]((systemBlue|systemGreen|systemIndigo|systemOrange|systemPink|systemPurple|systemRed|systemTeal|systemYellow|systemGray|systemGray2|systemGray3|systemGray4|systemGray5|systemGray6|clear|black|blue|brown|cyan|darkGray|gray|green|lightGray|magenta|orange|purple|red|white|yellow)\b)|(UIColor.init[(][^\s])'
        message: "Only Use Wallet Design System Colors"
        severity: error
 #(UIColor[^\s]+) = Find any instances of UIColor up to the first whitespace character to find instances of 'UIColor(blah' or 'UIColor.' etc
 #((?<!Colors)(?<!UIBarStyle))[.]((systemColors)\b) = Find any instances of `.systemColors` not preceded by `Colors` or `UIBarStyle`
 #The regex is saying to look for either of the above cases and mark them as errors to keep developers from using any UIColor and to only use colors from the Design System

    no_ui_fonts:
        excluded: '.*Fonts(Tests)*.swift' # Ignore this rule in the Fonts.swift and FontsTests.swift files
        name: "Don't Use UIFonts"
        regex: '(UIFont[^\s](?!Weight))'
        message: "Only Use Wallet Design System Fonts"
        severity: error

    no_labels:
        excluded: '.*Labels(Tests)*.swift' #Ignore this rule in the Labels.swift and LabelsTests.swift files
        name: "Don't Use UILabels"
        regex: 'UILabel[(][^\s]+|UILabel[.]init+'
        message: "Only Use Wallet Design System Labels"
        severity: error
        
    no_textfields:
        excluded: '.*TextFields(Tests)*.swift' #Ignore this rule in the TextFields.swift and TextFieldsTests.swift files
        name: "Don't Use UITextFields"
        regex: 'UITextField[(][^\s]+|UITextField[.]init'
        message: "Only Use Wallet Design System TextFields"
        severity: error
        
    no_buttons:
        excluded: '.*Buttons(Tests)*.swift' #Ignore this rule in the Buttons.swift and ButtonsTests.swift files
        name: "Don't Use UIButtons"
        regex: 'UIButton[(][^\s]+|UIButton[.]init'
        message: "Only Use Wallet Design System Buttons"
        severity: error

    no_dateFormatter_init:
        name: "Don't Initialize Date Formatters"
        regex: '^DateFormatter[(][^\s]+|DateFormatter[.]init'
        message: "Only Use DateFormatter From DFCore."
        severity: error

    no_fatal_error:
        excluded: 'FatalErrorUtilities.swift' # Ignore this rule in the FatalErrorUtilities.swift
        name: "Fatal errors forbidden."
        regex: 'fatalError[(]'
        message: "fatalError is forbidden. Use preconditionFailure instead."
        severity: error